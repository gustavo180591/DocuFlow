// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(VIEWER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id                  String    @id @default(cuid())
  numeroOrden         String    @unique
  numeroMatricula     String    @unique
  firstName           String
  lastName            String
  institucion         String?
  documentoIdentidad  String    @unique
  nacionalidad        String    @default("Argentina")
  status              String    @default("active")
  email               String?   @unique
  phone               String?
  address             String?
  city                String?
  state               String?
  postalCode          String?
  country             String?   @default("Argentina")
  membershipStartDate DateTime
  documents           MemberDocument[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([numeroOrden, numeroMatricula])
  @@index([documentoIdentidad])
  @@index([status])
}

// Member-specific documents
model MemberDocument {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String?
  fileUrl     String
  fileHash    String   @unique
  mimeType    String
  size        Int
  member      Member   @relation(fields: [memberId], references: [id])
  memberId    String
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([memberId])
}

// Document Processing Models
model ProcessedDocument {
  id          String       @id @default(cuid())
  originalName String
  storagePath String
  mimeType    String
  size        Int
  type        String       @default("UNKNOWN")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  extractions Extraction[]
  batch       ContributionBatch?
  transfer    BankTransfer?
}

model Extraction {
  id         String          @id @default(cuid())
  pageIndex  Int
  textRaw    String
  document   ProcessedDocument @relation(fields: [documentId], references: [id])
  documentId String

  @@unique([documentId, pageIndex])
}

model ContributionBatch {
  id                   String             @id @default(cuid())
  institutionName      String
  institutionCuit      String
  period               String
  concept              String
  personasCount        Int
  totalAportesPeriodo  Float
  reconciliationStatus String             @default("PENDIENTE")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  document             ProcessedDocument  @relation(fields: [documentId], references: [id])
  documentId           String             @unique
  items                ContributionItem[]
  transfer             BankTransfer?
}

model ContributionItem {
  id           String           @id @default(cuid())
  batch        ContributionBatch @relation(fields: [batchId], references: [id])
  batchId      String
  fullNameRaw  String
  legajosCount Int?             @default(1)
  remunerativo Float?
  aporteMonto  Float
  
  @@index([batchId])
}

model BankTransfer {
  id              String           @id @default(cuid())
  beneficiaryName String?
  beneficiaryCuit String?
  cbu             String?
  fecha           DateTime?
  nroOperacion    String?
  nroReferencia   String?
  importe         Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  document        ProcessedDocument @relation(fields: [documentId], references: [id])
  documentId      String           @unique
  batch           ContributionBatch? @relation(fields: [batchId], references: [id])
  batchId         String?          @unique
  
  @@index([documentId])
  @@index([batchId])
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum DocumentType {
  UNKNOWN
  LISTADO_APORTE
  COMPROBANTE_BANCO
}

enum ReconciliationStatus {
  PENDIENTE
  CONCILIADO
  RECHAZADO
}
