<script lang="ts">
  import { onMount } from 'svelte';
  import { fade, fly } from 'svelte/transition';
  import type { TransitionConfig } from 'svelte/transition';
  import { writable } from 'svelte/store';
  
  interface Institution {
    id?: string;
    name: string;
    cuit: string;
    address: string;
    phone: string;
    email: string;
    website: string;
    isActive: boolean;
    createdAt?: string;
    updatedAt?: string;
  }

  interface FormErrors {
    [key: string]: string;
  }

  const institutions = writable<Institution[]>([]);
  const loading = writable<boolean>(true);
  const error = writable<string | null>(null);
  const showModal = writable<boolean>(false);
  const formData = writable<Omit<Institution, 'id'>>({
    name: '',
    cuit: '',
    address: '',
    phone: '',
    email: '',
    website: '',
    isActive: true
  });
  const formErrors = writable<FormErrors>({});
  const isSubmitting = writable<boolean>(false);
  const searchTerm = writable<string>('');
  const currentPage = writable<number>(1);
  const itemsPerPage = 10;
  const totalItems = writable<number>(0);

  const fetchInstitutions = async () => {
    try {
      loading.set(true);
      error.set(null);
      
      const params = new URLSearchParams({
        search: $searchTerm,
        page: $currentPage.toString(),
        limit: itemsPerPage.toString()
      });
      
      const response = await fetch(`/api/institutions?${params}`);
      
      if (!response.ok) {
        throw new Error('Error al cargar las instituciones');
      }
      
      const data: { data: Institution[]; meta: { total: number } } = await response.json();
      institutions.set(data.data);
      totalItems.set(data.meta.total);
    } catch (err) {
      console.error('Error:', err);
      error.set(err instanceof Error ? err.message : 'Ocurrió un error inesperado');
    } finally {
      loading.set(false);
    }
  };

  const handleSearch = (e: Event) => {
    e?.preventDefault();
    currentPage.set(1);
    fetchInstitutions();
  };

  const handlePageChange = (page: number) => {
    currentPage.set(page);
    fetchInstitutions();
  };

  const openModal = () => {
    formData.set({
      name: '',
      cuit: '',
      address: '',
      phone: '',
      email: '',
      website: '',
      isActive: true
    });
    formErrors.set({});
    showModal.set(true);
  };

  const closeModal = () => {
    showModal.set(false);
  };

  const validateForm = (): boolean => {
    const errors: FormErrors = {};
    const currentFormData = $formData;
    
    if (!currentFormData.name.trim()) {
      errors.name = 'El nombre es requerido';
    }
    
    if (!currentFormData.cuit.trim()) {
      errors.cuit = 'El CUIT es requerido';
    } else if (!/^\d{2}-\d{8}-\d$/.test(currentFormData.cuit)) {
      errors.cuit = 'Formato de CUIT inválido (ej: 30-12345678-9)';
    }
    
    if (currentFormData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(currentFormData.email)) {
      errors.email = 'Email inválido';
    }
    
    formErrors.set(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (): Promise<void> => {
    if (!validateForm()) return;
    
    try {
      isSubmitting.set(true);
      const response = await fetch('/api/institutions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify($formData)
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Error al guardar la institución');
      }
      
      closeModal();
      await fetchInstitutions();
    } catch (err) {
      console.error('Error:', err);
      error.set(err instanceof Error ? err.message : 'Ocurrió un error inesperado');
    } finally {
      isSubmitting.set(false);
    }
  };

  onMount(() => {
    fetchInstitutions();
  });
</script>

<div class="container mx-auto px-4 py-8">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold text-gray-800">Instituciones</h1>
    <button 
      on:click={openModal}
      class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
    >
      Nueva Institución
    </button>
  </div>

  <!-- Search and Filter -->
  <div class="mb-6">
    <form on:submit|preventDefault={handleSearch} class="flex gap-2">
      <input
        type="text"
        bind:value={$searchTerm}
        placeholder="Buscar instituciones..."
        class="flex-1 border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <button 
        type="submit"
        class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
      >
        Buscar
      </button>
    </form>
  </div>

  {#if $loading}
    <div class="text-center py-8">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
      <p class="mt-2 text-gray-600">Cargando instituciones...</p>
    </div>
  {:else if $error}
    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
      <p class="font-bold">Error</p>
      <p>{$error}</p>
    </div>
  {:else if $institutions.length === 0}
    <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm text-yellow-700">
            No se encontraron instituciones. Crea una nueva institución para comenzar.
          </p>
        </div>
      </div>
    </div>
  {:else}
    <!-- Institutions Table -->
    <div class="bg-white shadow overflow-hidden sm:rounded-lg">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Nombre
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                CUIT
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Email
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th scope="col" class="relative px-6 py-3">
                <span class="sr-only">Acciones</span>
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {#each $institutions as institution (institution.id)}
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="text-sm font-medium text-gray-900">
                      {institution.name}
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {institution.cuit}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {institution.email || '-'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {institution.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
                    {institution.isActive ? 'Activo' : 'Inactivo'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <a href={`/instituciones/${institution.id}`} class="text-blue-600 hover:text-blue-900 mr-3">Editar</a>
                  <button class="text-red-600 hover:text-red-900">Eliminar</button>
                </td>
              </tr>
            {/each}
          </tbody>
        </table>
      </div>

      {#if $totalItems > itemsPerPage}
        <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
          <div class="flex-1 flex justify-between sm:hidden">
            <button 
              on:click={() => $currentPage > 1 && handlePageChange($currentPage - 1)}
              disabled={$currentPage === 1}
              class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Anterior
            </button>
            <button 
              on:click={() => handlePageChange($currentPage + 1)}
              disabled={$currentPage >= Math.ceil($totalItems / itemsPerPage)}
              class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Siguiente
            </button>
          </div>
          <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p class="text-sm text-gray-700">
                Mostrando <span class="font-medium">{($currentPage - 1) * itemsPerPage + 1}</span> a <span class="font-medium">
                  {Math.min($currentPage * itemsPerPage, $totalItems)}
                </span> de <span class="font-medium">{$totalItems}</span> resultados
              </p>
            </div>
            <div>
              <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <button
                  on:click={() => handlePageChange($currentPage - 1)}
                  disabled={$currentPage === 1}
                  class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <span class="sr-only">Anterior</span>
                  <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                  </svg>
                </button>
                {#each Array(Math.ceil($totalItems / itemsPerPage)) as _, i}
                  {#if i + 1 === $currentPage || 
                      i + 1 === 1 || 
                      i + 1 === Math.ceil($totalItems / itemsPerPage) || 
                      (i + 1 >= $currentPage - 1 && i + 1 <= $currentPage + 1)}
                    <button
                      on:click={() => handlePageChange(i + 1)}
                      class="relative inline-flex items-center px-4 py-2 border text-sm font-medium {i + 1 === $currentPage ? 'z-10 bg-blue-50 border-blue-500 text-blue-600' : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'}"
                    >
                      {i + 1}
                    </button>
                  {:else if (i + 1 === $currentPage - 2 || i + 1 === $currentPage + 2) && i + 1 !== 1 && i + 1 !== Math.ceil($totalItems / itemsPerPage)}
                    <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                      ...
                    </span>
                  {/if}
                {/each}
                <button
                  on:click={() => handlePageChange($currentPage + 1)}
                  disabled={$currentPage >= Math.ceil($totalItems / itemsPerPage)}
                  class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <span class="sr-only">Siguiente</span>
                  <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                  </svg>
                </button>
              </nav>
            </div>
          </div>
        </div>
      {/if}
    </div>
  {/if}

  <!-- Create Institution Modal -->
  {#if $showModal}
    <div 
      class="fixed inset-0 overflow-y-auto z-50" 
      role="dialog" 
      aria-modal="true"
      transition:fade={{ duration: 150 }}
    >
      <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <!-- Background overlay -->
        <div 
          class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
          on:click={closeModal}
          on:keydown|self={(e) => {
            if (e instanceof KeyboardEvent && e.key === 'Escape') {
              closeModal();
            }
          }}
          role="button"
          tabindex="0"
          aria-label="Cerrar modal"
          transition:fade
        ></div>

        <!-- Modal panel -->
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        
        <div 
          class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6"
          role="dialog"
          aria-modal="true"
          aria-labelledby="modal-headline"
          in:fly={{ y: 50, duration: 200 }}
          out:fly={{ y: 0, duration: 200, opacity: 0 }}
        >
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6">
            <div class="sm:flex sm:items-start">
              <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                  Nueva Institución
                </h3>
                
                {#if $error}
                  <div class="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                    <p class="font-bold">Error</p>
                    <p>{$error}</p>
                  </div>
                {/if}

                <div class="space-y-4">
                  <div>
                    <label for="name" class="block text-sm font-medium text-gray-700">Nombre *</label>
                    <input
                      type="text"
                      id="name"
                      bind:value={$formData.name}
                      class="mt-1 block w-full border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      class:border-red-300={!!$formErrors.name}
                      class:border-gray-300={!$formErrors.name}
                    />
                    {#if $formErrors.name}
                      <p class="mt-1 text-sm text-red-600">{$formErrors.name}</p>
                    {/if}
                  </div>

                  <div>
                    <label for="cuit" class="block text-sm font-medium text-gray-700">CUIT *</label>
                    <input
                      type="text"
                      id="cuit"
                      bind:value={$formData.cuit}
                      placeholder="Ej: 30-12345678-9"
                      class="mt-1 block w-full border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      class:border-red-300={!!$formErrors.cuit}
                      class:border-gray-300={!$formErrors.cuit}
                    />
                    {#if $formErrors.cuit}
                      <p class="mt-1 text-sm text-red-600">{$formErrors.cuit}</p>
                    {/if}
                  </div>

                  <div>
                    <label for="address" class="block text-sm font-medium text-gray-700">Dirección</label>
                    <input
                      type="text"
                      id="address"
                      bind:value={$formData.address}
                      class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    />
                  </div>

                  <div>
                    <label for="phone" class="block text-sm font-medium text-gray-700">Teléfono</label>
                    <input
                      type="tel"
                      id="phone"
                      bind:value={$formData.phone}
                      class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    />
                  </div>

                  <div>
                    <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                    <input
                      type="email"
                      id="email"
                      bind:value={$formData.email}
                      class="mt-1 block w-full border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      class:border-red-300={!!$formErrors.email}
                      class:border-gray-300={!$formErrors.email}
                    />
                    {#if $formErrors.email}
                      <p class="mt-1 text-sm text-red-600">{$formErrors.email}</p>
                    {/if}
                  </div>

                  <div>
                    <label for="website" class="block text-sm font-medium text-gray-700">Sitio web</label>
                    <input
                      type="url"
                      id="website"
                      bind:value={$formData.website}
                      class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    />
                  </div>

                  <div class="flex items-center">
                    <input
                      type="checkbox"
                      id="isActive"
                      bind:checked={$formData.isActive}
                      class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <label for="isActive" class="ml-2 block text-sm text-gray-700">
                      Activo
                    </label>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="button"
              on:click={handleSubmit}
              disabled={$isSubmitting}
              class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {#if $isSubmitting}
                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Guardando...
              {:else}
                Guardar
              {/if}
            </button>
            <button
              type="button"
              on:click={closeModal}
              disabled={$isSubmitting}
              class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Cancelar
            </button>
          </div>
        </div>
      </div>
    </div>
  {/if}
</div>
